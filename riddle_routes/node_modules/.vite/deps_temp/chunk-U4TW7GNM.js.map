{
  "version": 3,
  "sources": ["../../ol/CollectionEventType.js", "../../ol/Collection.js"],
  "sourcesContent": ["/**\r\n * @module ol/CollectionEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when an item is added to the collection.\r\n   * @event module:ol/Collection.CollectionEvent#add\r\n   * @api\r\n   */\r\n  ADD: 'add',\r\n  /**\r\n   * Triggered when an item is removed from the collection.\r\n   * @event module:ol/Collection.CollectionEvent#remove\r\n   * @api\r\n   */\r\n  REMOVE: 'remove',\r\n};\r\n", "/**\r\n * @module ol/Collection\r\n */\r\nimport AssertionError from './AssertionError.js';\r\nimport BaseObject from './Object.js';\r\nimport CollectionEventType from './CollectionEventType.js';\r\nimport Event from './events/Event.js';\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  LENGTH: 'length',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\r\n * type.\r\n * @template T\r\n */\r\nexport class CollectionEvent extends Event {\r\n  /**\r\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\r\n   * @param {T} element Element.\r\n   * @param {number} index The index of the added or removed element.\r\n   */\r\n  constructor(type, element, index) {\r\n    super(type);\r\n\r\n    /**\r\n     * The element that is added to or removed from the collection.\r\n     * @type {T}\r\n     * @api\r\n     */\r\n    this.element = element;\r\n\r\n    /**\r\n     * The index of the added or removed element.\r\n     * @type {number}\r\n     * @api\r\n     */\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/***\r\n * @template T\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\r\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [unique=false] Disallow the same item from being added to\r\n * the collection twice.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * An expanded version of standard JS Array, adding convenience methods for\r\n * manipulation. Add and remove changes to the Collection trigger a Collection\r\n * event. Note that this does not cover changes to the objects _within_ the\r\n * Collection; they trigger events on the appropriate object, not on the\r\n * Collection as a whole.\r\n *\r\n * @fires CollectionEvent\r\n *\r\n * @template T\r\n * @api\r\n */\r\nclass Collection extends BaseObject {\r\n  /**\r\n   * @param {Array<T>} [array] Array.\r\n   * @param {Options} [options] Collection options.\r\n   */\r\n  constructor(array, options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {CollectionOnSignature<T, void>}\r\n     */\r\n    this.un;\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.unique_ = !!options.unique;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<T>}\r\n     */\r\n    this.array_ = array ? array : [];\r\n\r\n    if (this.unique_) {\r\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\r\n        this.assertUnique_(this.array_[i], i);\r\n      }\r\n    }\r\n\r\n    this.updateLength_();\r\n  }\r\n\r\n  /**\r\n   * Remove all elements from the collection.\r\n   * @api\r\n   */\r\n  clear() {\r\n    while (this.getLength() > 0) {\r\n      this.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add elements to the collection.  This pushes each item in the provided array\r\n   * to the end of the collection.\r\n   * @param {!Array<T>} arr Array.\r\n   * @return {Collection<T>} This collection.\r\n   * @api\r\n   */\r\n  extend(arr) {\r\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\r\n      this.push(arr[i]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * @param {function(T, number, Array<T>): *} f The function to call\r\n   *     for every element. This function takes 3 arguments (the element, the\r\n   *     index and the array). The return value is ignored.\r\n   * @api\r\n   */\r\n  forEach(f) {\r\n    const array = this.array_;\r\n    for (let i = 0, ii = array.length; i < ii; ++i) {\r\n      f(array[i], i, array);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a reference to the underlying Array object. Warning: if the array\r\n   * is mutated, no events will be dispatched by the collection, and the\r\n   * collection's \"length\" property won't be in sync with the actual length\r\n   * of the array.\r\n   * @return {!Array<T>} Array.\r\n   * @api\r\n   */\r\n  getArray() {\r\n    return this.array_;\r\n  }\r\n\r\n  /**\r\n   * Get the element at the provided index.\r\n   * @param {number} index Index.\r\n   * @return {T} Element.\r\n   * @api\r\n   */\r\n  item(index) {\r\n    return this.array_[index];\r\n  }\r\n\r\n  /**\r\n   * Get the length of this collection.\r\n   * @return {number} The length of the array.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getLength() {\r\n    return this.get(Property.LENGTH);\r\n  }\r\n\r\n  /**\r\n   * Insert an element at the provided index.\r\n   * @param {number} index Index.\r\n   * @param {T} elem Element.\r\n   * @api\r\n   */\r\n  insertAt(index, elem) {\r\n    if (index < 0 || index > this.getLength()) {\r\n      throw new Error('Index out of bounds: ' + index);\r\n    }\r\n    if (this.unique_) {\r\n      this.assertUnique_(elem);\r\n    }\r\n    this.array_.splice(index, 0, elem);\r\n    this.updateLength_();\r\n    this.dispatchEvent(\r\n      new CollectionEvent(CollectionEventType.ADD, elem, index)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove the last element of the collection and return it.\r\n   * Return `undefined` if the collection is empty.\r\n   * @return {T|undefined} Element.\r\n   * @api\r\n   */\r\n  pop() {\r\n    return this.removeAt(this.getLength() - 1);\r\n  }\r\n\r\n  /**\r\n   * Insert the provided element at the end of the collection.\r\n   * @param {T} elem Element.\r\n   * @return {number} New length of the collection.\r\n   * @api\r\n   */\r\n  push(elem) {\r\n    if (this.unique_) {\r\n      this.assertUnique_(elem);\r\n    }\r\n    const n = this.getLength();\r\n    this.insertAt(n, elem);\r\n    return this.getLength();\r\n  }\r\n\r\n  /**\r\n   * Remove the first occurrence of an element from the collection.\r\n   * @param {T} elem Element.\r\n   * @return {T|undefined} The removed element or undefined if none found.\r\n   * @api\r\n   */\r\n  remove(elem) {\r\n    const arr = this.array_;\r\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\r\n      if (arr[i] === elem) {\r\n        return this.removeAt(i);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Remove the element at the provided index and return it.\r\n   * Return `undefined` if the collection does not contain this index.\r\n   * @param {number} index Index.\r\n   * @return {T|undefined} Value.\r\n   * @api\r\n   */\r\n  removeAt(index) {\r\n    if (index < 0 || index >= this.getLength()) {\r\n      return undefined;\r\n    }\r\n    const prev = this.array_[index];\r\n    this.array_.splice(index, 1);\r\n    this.updateLength_();\r\n    this.dispatchEvent(\r\n      /** @type {CollectionEvent<T>} */ (\r\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\r\n      )\r\n    );\r\n    return prev;\r\n  }\r\n\r\n  /**\r\n   * Set the element at the provided index.\r\n   * @param {number} index Index.\r\n   * @param {T} elem Element.\r\n   * @api\r\n   */\r\n  setAt(index, elem) {\r\n    const n = this.getLength();\r\n    if (index >= n) {\r\n      this.insertAt(index, elem);\r\n      return;\r\n    }\r\n    if (index < 0) {\r\n      throw new Error('Index out of bounds: ' + index);\r\n    }\r\n    if (this.unique_) {\r\n      this.assertUnique_(elem, index);\r\n    }\r\n    const prev = this.array_[index];\r\n    this.array_[index] = elem;\r\n    this.dispatchEvent(\r\n      /** @type {CollectionEvent<T>} */ (\r\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\r\n      )\r\n    );\r\n    this.dispatchEvent(\r\n      /** @type {CollectionEvent<T>} */ (\r\n        new CollectionEvent(CollectionEventType.ADD, elem, index)\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateLength_() {\r\n    this.set(Property.LENGTH, this.array_.length);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {T} elem Element.\r\n   * @param {number} [except] Optional index to ignore.\r\n   */\r\n  assertUnique_(elem, except) {\r\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\r\n      if (this.array_[i] === elem && i !== except) {\r\n        throw new AssertionError(58);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Collection;\r\n"],
  "mappings": ";;;;;;;;;AAOA,IAAO,8BAAQ;AAAA,EAMb,KAAK;AAAA,EAML,QAAQ;AACV;;;ACRA,IAAM,WAAW;AAAA,EACf,QAAQ;AACV;AAQO,IAAM,kBAAN,cAA8B,cAAM;AAAA,EAMzC,YAAY,MAAM,SAAS,OAAO;AAChC,UAAM,IAAI;AAOV,SAAK,UAAU;AAOf,SAAK,QAAQ;AAAA,EACf;AACF;AA+BA,IAAM,aAAN,cAAyB,eAAW;AAAA,EAKlC,YAAY,OAAO,SAAS;AAC1B,UAAM;AAKN,SAAK;AAKL,SAAK;AAKL,SAAK;AAEL,cAAU,WAAW,CAAC;AAMtB,SAAK,UAAU,CAAC,CAAC,QAAQ;AAMzB,SAAK,SAAS,QAAQ,QAAQ,CAAC;AAE/B,QAAI,KAAK,SAAS;AAChB,eAAS,IAAI,GAAG,KAAK,KAAK,OAAO,QAAQ,IAAI,IAAI,EAAE,GAAG;AACpD,aAAK,cAAc,KAAK,OAAO,IAAI,CAAC;AAAA,MACtC;AAAA,IACF;AAEA,SAAK,cAAc;AAAA,EACrB;AAAA,EAMA,QAAQ;AACN,WAAO,KAAK,UAAU,IAAI,GAAG;AAC3B,WAAK,IAAI;AAAA,IACX;AAAA,EACF;AAAA,EASA,OAAO,KAAK;AACV,aAAS,IAAI,GAAG,KAAK,IAAI,QAAQ,IAAI,IAAI,EAAE,GAAG;AAC5C,WAAK,KAAK,IAAI,EAAE;AAAA,IAClB;AACA,WAAO;AAAA,EACT;AAAA,EASA,QAAQ,GAAG;AACT,UAAM,QAAQ,KAAK;AACnB,aAAS,IAAI,GAAG,KAAK,MAAM,QAAQ,IAAI,IAAI,EAAE,GAAG;AAC9C,QAAE,MAAM,IAAI,GAAG,KAAK;AAAA,IACtB;AAAA,EACF;AAAA,EAUA,WAAW;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EAQA,KAAK,OAAO;AACV,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EAQA,YAAY;AACV,WAAO,KAAK,IAAI,SAAS,MAAM;AAAA,EACjC;AAAA,EAQA,SAAS,OAAO,MAAM;AACpB,QAAI,QAAQ,KAAK,QAAQ,KAAK,UAAU,GAAG;AACzC,YAAM,IAAI,MAAM,0BAA0B,KAAK;AAAA,IACjD;AACA,QAAI,KAAK,SAAS;AAChB,WAAK,cAAc,IAAI;AAAA,IACzB;AACA,SAAK,OAAO,OAAO,OAAO,GAAG,IAAI;AACjC,SAAK,cAAc;AACnB,SAAK;AAAA,MACH,IAAI,gBAAgB,4BAAoB,KAAK,MAAM,KAAK;AAAA,IAC1D;AAAA,EACF;AAAA,EAQA,MAAM;AACJ,WAAO,KAAK,SAAS,KAAK,UAAU,IAAI,CAAC;AAAA,EAC3C;AAAA,EAQA,KAAK,MAAM;AACT,QAAI,KAAK,SAAS;AAChB,WAAK,cAAc,IAAI;AAAA,IACzB;AACA,UAAM,IAAI,KAAK,UAAU;AACzB,SAAK,SAAS,GAAG,IAAI;AACrB,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAQA,OAAO,MAAM;AACX,UAAM,MAAM,KAAK;AACjB,aAAS,IAAI,GAAG,KAAK,IAAI,QAAQ,IAAI,IAAI,EAAE,GAAG;AAC5C,UAAI,IAAI,OAAO,MAAM;AACnB,eAAO,KAAK,SAAS,CAAC;AAAA,MACxB;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EASA,SAAS,OAAO;AACd,QAAI,QAAQ,KAAK,SAAS,KAAK,UAAU,GAAG;AAC1C,aAAO;AAAA,IACT;AACA,UAAM,OAAO,KAAK,OAAO;AACzB,SAAK,OAAO,OAAO,OAAO,CAAC;AAC3B,SAAK,cAAc;AACnB,SAAK;AAAA,MAED,IAAI,gBAAgB,4BAAoB,QAAQ,MAAM,KAAK;AAAA,IAE/D;AACA,WAAO;AAAA,EACT;AAAA,EAQA,MAAM,OAAO,MAAM;AACjB,UAAM,IAAI,KAAK,UAAU;AACzB,QAAI,SAAS,GAAG;AACd,WAAK,SAAS,OAAO,IAAI;AACzB;AAAA,IACF;AACA,QAAI,QAAQ,GAAG;AACb,YAAM,IAAI,MAAM,0BAA0B,KAAK;AAAA,IACjD;AACA,QAAI,KAAK,SAAS;AAChB,WAAK,cAAc,MAAM,KAAK;AAAA,IAChC;AACA,UAAM,OAAO,KAAK,OAAO;AACzB,SAAK,OAAO,SAAS;AACrB,SAAK;AAAA,MAED,IAAI,gBAAgB,4BAAoB,QAAQ,MAAM,KAAK;AAAA,IAE/D;AACA,SAAK;AAAA,MAED,IAAI,gBAAgB,4BAAoB,KAAK,MAAM,KAAK;AAAA,IAE5D;AAAA,EACF;AAAA,EAKA,gBAAgB;AACd,SAAK,IAAI,SAAS,QAAQ,KAAK,OAAO,MAAM;AAAA,EAC9C;AAAA,EAOA,cAAc,MAAM,QAAQ;AAC1B,aAAS,IAAI,GAAG,KAAK,KAAK,OAAO,QAAQ,IAAI,IAAI,EAAE,GAAG;AACpD,UAAI,KAAK,OAAO,OAAO,QAAQ,MAAM,QAAQ;AAC3C,cAAM,IAAI,uBAAe,EAAE;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAO,qBAAQ;",
  "names": []
}
