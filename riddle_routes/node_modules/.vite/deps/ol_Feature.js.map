{
  "version": 3,
  "sources": ["../../ol/Feature.js", "dep:ol_Feature"],
  "sourcesContent": ["/**\r\n * @module ol/Feature\r\n */\r\nimport BaseObject from './Object.js';\r\nimport EventType from './events/EventType.js';\r\nimport {assert} from './asserts.js';\r\nimport {listen, unlistenByKey} from './events.js';\r\n\r\n/**\r\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\r\n */\r\n\r\n/**\r\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\r\n *     |'change:geometry', Return>} FeatureOnSignature\r\n */\r\n\r\n/***\r\n * @template Geometry\r\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A vector object for geographic features with a geometry and other\r\n * attribute properties, similar to the features in vector file formats like\r\n * GeoJSON.\r\n *\r\n * Features can be styled individually with `setStyle`; otherwise they use the\r\n * style of their vector layer.\r\n *\r\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\r\n * the feature object, so they are observable, and have get/set accessors.\r\n *\r\n * Typically, a feature has a single geometry property. You can set the\r\n * geometry using the `setGeometry` method and get it with `getGeometry`.\r\n * It is possible to store more than one geometry on a feature using attribute\r\n * properties. By default, the geometry used for rendering is identified by\r\n * the property name `geometry`. If you want to use another geometry property\r\n * for rendering, use the `setGeometryName` method to change the attribute\r\n * property associated with the geometry for the feature.  For example:\r\n *\r\n * ```js\r\n *\r\n * import Feature from 'ol/Feature';\r\n * import Polygon from 'ol/geom/Polygon';\r\n * import Point from 'ol/geom/Point';\r\n *\r\n * const feature = new Feature({\r\n *   geometry: new Polygon(polyCoords),\r\n *   labelPoint: new Point(labelCoords),\r\n *   name: 'My Polygon',\r\n * });\r\n *\r\n * // get the polygon geometry\r\n * const poly = feature.getGeometry();\r\n *\r\n * // Render the feature as a point using the coordinates from labelPoint\r\n * feature.setGeometryName('labelPoint');\r\n *\r\n * // get the point geometry\r\n * const point = feature.getGeometry();\r\n * ```\r\n *\r\n * @api\r\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\r\n */\r\nclass Feature extends BaseObject {\r\n  /**\r\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]\r\n   *     You may pass a Geometry object directly, or an object literal containing\r\n   *     properties. If you pass an object literal, you may include a Geometry\r\n   *     associated with a `geometry` key.\r\n   */\r\n  constructor(geometryOrProperties) {\r\n    super();\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */\r\n    this.id_ = undefined;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.geometryName_ = 'geometry';\r\n\r\n    /**\r\n     * User provided style.\r\n     * @private\r\n     * @type {import(\"./style/Style.js\").StyleLike}\r\n     */\r\n    this.style_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\r\n     */\r\n    this.styleFunction_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\r\n    this.geometryChangeKey_ = null;\r\n\r\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n\r\n    if (geometryOrProperties) {\r\n      if (\r\n        typeof (\r\n          /** @type {?} */ (geometryOrProperties).getSimplifiedGeometry\r\n        ) === 'function'\r\n      ) {\r\n        const geometry = /** @type {Geometry} */ (geometryOrProperties);\r\n        this.setGeometry(geometry);\r\n      } else {\r\n        /** @type {Object<string, *>} */\r\n        const properties = geometryOrProperties;\r\n        this.setProperties(properties);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this feature. If the original feature has a geometry it\r\n   * is also cloned. The feature id is not set in the clone.\r\n   * @return {Feature<Geometry>} The clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const clone = /** @type {Feature<Geometry>} */ (\r\n      new Feature(this.hasProperties() ? this.getProperties() : null)\r\n    );\r\n    clone.setGeometryName(this.getGeometryName());\r\n    const geometry = this.getGeometry();\r\n    if (geometry) {\r\n      clone.setGeometry(/** @type {Geometry} */ (geometry.clone()));\r\n    }\r\n    const style = this.getStyle();\r\n    if (style) {\r\n      clone.setStyle(style);\r\n    }\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's default geometry.  A feature may have any number of named\r\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\r\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\r\n   * @return {Geometry|undefined} The default geometry for the feature.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getGeometry() {\r\n    return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));\r\n  }\r\n\r\n  /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is either set when reading data from a remote source or set explicitly by\r\n   * calling {@link module:ol/Feature~Feature#setId}.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\r\n  getId() {\r\n    return this.id_;\r\n  }\r\n\r\n  /**\r\n   * Get the name of the feature's default geometry.  By default, the default\r\n   * geometry is named `geometry`.\r\n   * @return {string} Get the property name associated with the default geometry\r\n   *     for this feature.\r\n   * @api\r\n   */\r\n  getGeometryName() {\r\n    return this.geometryName_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's style. Will return what was provided to the\r\n   * {@link module:ol/Feature~Feature#setStyle} method.\r\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's style function.\r\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\r\n   * representing the current style of this feature.\r\n   * @api\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGeometryChange_() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGeometryChanged_() {\r\n    if (this.geometryChangeKey_) {\r\n      unlistenByKey(this.geometryChangeKey_);\r\n      this.geometryChangeKey_ = null;\r\n    }\r\n    const geometry = this.getGeometry();\r\n    if (geometry) {\r\n      this.geometryChangeKey_ = listen(\r\n        geometry,\r\n        EventType.CHANGE,\r\n        this.handleGeometryChange_,\r\n        this\r\n      );\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the default geometry for the feature.  This will update the property\r\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\r\n   * @param {Geometry|undefined} geometry The new geometry.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setGeometry(geometry) {\r\n    this.set(this.geometryName_, geometry);\r\n  }\r\n\r\n  /**\r\n   * Set the style for the feature to override the layer style.  This can be a\r\n   * single style object, an array of styles, or a function that takes a\r\n   * resolution and returns an array of styles. To unset the feature style, call\r\n   * `setStyle()` without arguments or a falsey value.\r\n   * @param {import(\"./style/Style.js\").StyleLike} [style] Style for this feature.\r\n   * @api\r\n   * @fires module:ol/events/Event~BaseEvent#event:change\r\n   */\r\n  setStyle(style) {\r\n    this.style_ = style;\r\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the feature id.  The feature id is considered stable and may be used when\r\n   * requesting features or comparing identifiers returned from a remote source.\r\n   * The feature id can be used with the\r\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\r\n   * @param {number|string|undefined} id The feature id.\r\n   * @api\r\n   * @fires module:ol/events/Event~BaseEvent#event:change\r\n   */\r\n  setId(id) {\r\n    this.id_ = id;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the property name to be used when getting the feature's default geometry.\r\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\r\n   * this name will be returned.\r\n   * @param {string} name The property name of the default geometry.\r\n   * @api\r\n   */\r\n  setGeometryName(name) {\r\n    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n    this.geometryName_ = name;\r\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n    this.handleGeometryChanged_();\r\n  }\r\n}\r\n\r\n/**\r\n * Convert the provided object into a feature style function.  Functions passed\r\n * through unchanged.  Arrays of Style or single style objects wrapped\r\n * in a new feature style function.\r\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\r\n *     A feature style function, a single style, or an array of styles.\r\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\r\n */\r\nexport function createStyleFunction(obj) {\r\n  if (typeof obj === 'function') {\r\n    return obj;\r\n  } else {\r\n    /**\r\n     * @type {Array<import(\"./style/Style.js\").default>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(obj)) {\r\n      styles = obj;\r\n    } else {\r\n      assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\r\n      const style = /** @type {import(\"./style/Style.js\").default} */ (obj);\r\n      styles = [style];\r\n    }\r\n    return function () {\r\n      return styles;\r\n    };\r\n  }\r\n}\r\nexport default Feature;\r\n", "import d from \"./node_modules/ol/Feature.js\";export default d;\nexport * from \"./node_modules/ol/Feature.js\""],
  "mappings": ";;;;;;;;;;;;AA0EA,IAAM,UAAN,cAAsB,eAAW;AAAA,EAO/B,YAAY,sBAAsB;AAChC,UAAM;AAKN,SAAK;AAKL,SAAK;AAKL,SAAK;AAML,SAAK,MAAM;AAMX,SAAK,gBAAgB;AAOrB,SAAK,SAAS;AAMd,SAAK,iBAAiB;AAMtB,SAAK,qBAAqB;AAE1B,SAAK,kBAAkB,KAAK,eAAe,KAAK,sBAAsB;AAEtE,QAAI,sBAAsB;AACxB,UACE,OACoB,qBAAsB,0BACpC,YACN;AACA,cAAM,WAAoC;AAC1C,aAAK,YAAY,QAAQ;AAAA,MAC3B,OAAO;AAEL,cAAM,aAAa;AACnB,aAAK,cAAc,UAAU;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA,EAQA,QAAQ;AACN,UAAM,QACJ,IAAI,QAAQ,KAAK,cAAc,IAAI,KAAK,cAAc,IAAI,IAAI;AAEhE,UAAM,gBAAgB,KAAK,gBAAgB,CAAC;AAC5C,UAAM,WAAW,KAAK,YAAY;AAClC,QAAI,UAAU;AACZ,YAAM,YAAqC,SAAS,MAAM,CAAE;AAAA,IAC9D;AACA,UAAM,QAAQ,KAAK,SAAS;AAC5B,QAAI,OAAO;AACT,YAAM,SAAS,KAAK;AAAA,IACtB;AACA,WAAO;AAAA,EACT;AAAA,EAUA,cAAc;AACZ,WAA0C,KAAK,IAAI,KAAK,aAAa;AAAA,EACvE;AAAA,EASA,QAAQ;AACN,WAAO,KAAK;AAAA,EACd;AAAA,EASA,kBAAkB;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EAQA,WAAW;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EAQA,mBAAmB;AACjB,WAAO,KAAK;AAAA,EACd;AAAA,EAKA,wBAAwB;AACtB,SAAK,QAAQ;AAAA,EACf;AAAA,EAKA,yBAAyB;AACvB,QAAI,KAAK,oBAAoB;AAC3B,oBAAc,KAAK,kBAAkB;AACrC,WAAK,qBAAqB;AAAA,IAC5B;AACA,UAAM,WAAW,KAAK,YAAY;AAClC,QAAI,UAAU;AACZ,WAAK,qBAAqB;AAAA,QACxB;AAAA,QACA,kBAAU;AAAA,QACV,KAAK;AAAA,QACL;AAAA,MACF;AAAA,IACF;AACA,SAAK,QAAQ;AAAA,EACf;AAAA,EASA,YAAY,UAAU;AACpB,SAAK,IAAI,KAAK,eAAe,QAAQ;AAAA,EACvC;AAAA,EAWA,SAAS,OAAO;AACd,SAAK,SAAS;AACd,SAAK,iBAAiB,CAAC,QAAQ,SAAY,oBAAoB,KAAK;AACpE,SAAK,QAAQ;AAAA,EACf;AAAA,EAWA,MAAM,IAAI;AACR,SAAK,MAAM;AACX,SAAK,QAAQ;AAAA,EACf;AAAA,EASA,gBAAgB,MAAM;AACpB,SAAK,qBAAqB,KAAK,eAAe,KAAK,sBAAsB;AACzE,SAAK,gBAAgB;AACrB,SAAK,kBAAkB,KAAK,eAAe,KAAK,sBAAsB;AACtE,SAAK,uBAAuB;AAAA,EAC9B;AACF;AAUO,SAAS,oBAAoB,KAAK;AACvC,MAAI,OAAO,QAAQ,YAAY;AAC7B,WAAO;AAAA,EACT,OAAO;AAIL,QAAI;AACJ,QAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,eAAS;AAAA,IACX,OAAO;AACL,aAAO,OAA0B,IAAK,cAAe,YAAY,EAAE;AACnE,YAAM,QAA2D;AACjE,eAAS,CAAC,KAAK;AAAA,IACjB;AACA,WAAO,WAAY;AACjB,aAAO;AAAA,IACT;AAAA,EACF;AACF;AACA,IAAO,kBAAQ;;;AC9U8B,IAAO,qBAAQ;",
  "names": []
}
