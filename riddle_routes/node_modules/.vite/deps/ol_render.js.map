{
  "version": 3,
  "sources": ["../../ol/render.js"],
  "sourcesContent": ["/**\r\n * @module ol/render\r\n */\r\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\r\nimport {DEVICE_PIXEL_RATIO} from './has.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n  multiply as multiplyTransform,\r\n  scale as scaleTransform,\r\n} from './transform.js';\r\nimport {getSquaredTolerance} from './renderer/vector.js';\r\nimport {getTransformFromProjections, getUserProjection} from './proj.js';\r\n\r\n/**\r\n * @typedef {Object} State\r\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\r\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\r\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\r\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\r\n * @property {number} resolution Resolution that the render batch was created and optimized for.\r\n * This is not the view's resolution that is being rendered.\r\n * @property {number} rotation Rotation of the rendered layer in radians.\r\n */\r\n\r\n/**\r\n * A function to be used when sorting features before rendering.\r\n * It takes two instances of {@link module:ol/Feature~Feature} or\r\n * {@link module:ol/render/Feature~RenderFeature} and returns a `{number}`.\r\n *\r\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} ToContextOptions\r\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\r\n * pixels. When provided, both canvas and css size will be set according to the\r\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\r\n * altered.\r\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\r\n * pixel to css pixel ratio) for the canvas.\r\n */\r\n\r\n/**\r\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\r\n * to the context's canvas.\r\n *\r\n * The units for geometry coordinates are css pixels relative to the top left\r\n * corner of the canvas element.\r\n * ```js\r\n * import {toContext} from 'ol/render';\r\n * import Fill from 'ol/style/Fill';\r\n * import Polygon from 'ol/geom/Polygon';\r\n *\r\n * const canvas = document.createElement('canvas');\r\n * const render = toContext(\r\n *     canvas.getContext('2d'),\r\n *     {size: [100, 100]}\r\n * );\r\n * render.setFillStrokeStyle(new Fill({ color: blue }));\r\n * render.drawPolygon(\r\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]])\r\n * );\r\n * ```\r\n *\r\n * @param {CanvasRenderingContext2D} context Canvas context.\r\n * @param {ToContextOptions} [options] Options.\r\n * @return {CanvasImmediateRenderer} Canvas Immediate.\r\n * @api\r\n */\r\nexport function toContext(context, options) {\r\n  const canvas = context.canvas;\r\n  options = options ? options : {};\r\n  const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\r\n  const size = options.size;\r\n  if (size) {\r\n    canvas.width = size[0] * pixelRatio;\r\n    canvas.height = size[1] * pixelRatio;\r\n    canvas.style.width = size[0] + 'px';\r\n    canvas.style.height = size[1] + 'px';\r\n  }\r\n  const extent = [0, 0, canvas.width, canvas.height];\r\n  const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\r\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\r\n}\r\n\r\n/**\r\n * Gets a vector context for drawing to the event's canvas.\r\n * @param {import(\"./render/Event.js\").default} event Render event.\r\n * @return {CanvasImmediateRenderer} Vector context.\r\n * @api\r\n */\r\nexport function getVectorContext(event) {\r\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\r\n    throw new Error('Only works for render events from Canvas 2D layers');\r\n  }\r\n\r\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\r\n  const canvasPixelRatio = event.inversePixelTransform[0];\r\n  const frameState = event.frameState;\r\n  const transform = multiplyTransform(\r\n    event.inversePixelTransform.slice(),\r\n    frameState.coordinateToPixelTransform\r\n  );\r\n  const squaredTolerance = getSquaredTolerance(\r\n    frameState.viewState.resolution,\r\n    canvasPixelRatio\r\n  );\r\n  let userTransform;\r\n  const userProjection = getUserProjection();\r\n  if (userProjection) {\r\n    userTransform = getTransformFromProjections(\r\n      userProjection,\r\n      frameState.viewState.projection\r\n    );\r\n  }\r\n\r\n  return new CanvasImmediateRenderer(\r\n    event.context,\r\n    canvasPixelRatio,\r\n    frameState.extent,\r\n    transform,\r\n    frameState.viewState.rotation,\r\n    squaredTolerance,\r\n    userTransform\r\n  );\r\n}\r\n\r\n/**\r\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\r\n * @param {import(\"./render/Event.js\").default} event Render event.\r\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\r\n * corner of the map viewport.\r\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\r\n * @api\r\n */\r\nexport function getRenderPixel(event, pixel) {\r\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEO,SAAS,UAAU,SAAS,SAAS;AAC1C,QAAM,SAAS,QAAQ;AACvB,YAAU,UAAU,UAAU,CAAC;AAC/B,QAAM,aAAa,QAAQ,cAAc;AACzC,QAAM,OAAO,QAAQ;AACrB,MAAI,MAAM;AACR,WAAO,QAAQ,KAAK,KAAK;AACzB,WAAO,SAAS,KAAK,KAAK;AAC1B,WAAO,MAAM,QAAQ,KAAK,KAAK;AAC/B,WAAO,MAAM,SAAS,KAAK,KAAK;AAAA,EAClC;AACA,QAAM,SAAS,CAAC,GAAG,GAAG,OAAO,OAAO,OAAO,MAAM;AACjD,QAAM,YAAY,MAAe,OAAgB,GAAG,YAAY,UAAU;AAC1E,SAAO,IAAI,kBAAwB,SAAS,YAAY,QAAQ,WAAW,CAAC;AAC9E;AAQO,SAAS,iBAAiB,OAAO;AACtC,MAAI,EAAE,MAAM,mBAAmB,2BAA2B;AACxD,UAAM,IAAI,MAAM,oDAAoD;AAAA,EACtE;AAGA,QAAM,mBAAmB,MAAM,sBAAsB;AACrD,QAAM,aAAa,MAAM;AACzB,QAAM,YAAY;AAAA,IAChB,MAAM,sBAAsB,MAAM;AAAA,IAClC,WAAW;AAAA,EACb;AACA,QAAM,mBAAmB;AAAA,IACvB,WAAW,UAAU;AAAA,IACrB;AAAA,EACF;AACA,MAAI;AACJ,QAAM,iBAAiB,kBAAkB;AACzC,MAAI,gBAAgB;AAClB,oBAAgB;AAAA,MACd;AAAA,MACA,WAAW,UAAU;AAAA,IACvB;AAAA,EACF;AAEA,SAAO,IAAI;AAAA,IACT,MAAM;AAAA,IACN;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA,WAAW,UAAU;AAAA,IACrB;AAAA,IACA;AAAA,EACF;AACF;AAUO,SAAS,eAAe,OAAO,OAAO;AAC3C,SAAO,MAAe,MAAM,uBAAuB,MAAM,MAAM,CAAC,CAAC;AACnE;",
  "names": []
}
