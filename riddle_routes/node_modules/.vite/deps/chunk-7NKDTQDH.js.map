{
  "version": 3,
  "sources": ["../../ol/control/ZoomSlider.js"],
  "sourcesContent": ["/**\n * @module ol/control/ZoomSlider\n */\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {clamp} from '../math.js';\nimport {easeOut} from '../easing.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {stopPropagation} from '../events/Event.js';\n\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nconst Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1,\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nclass ZoomSlider extends Control {\n  /**\n   * @param {Options} [options] Zoom slider options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n    });\n\n    /**\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n    this.currentResolution_ = undefined;\n\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n    this.direction_ = Direction.VERTICAL;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.heightLimit_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.widthLimit_ = 0;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.startX_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.startY_;\n\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.thumbSize_ = null;\n\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n    this.sliderInitialized_ = false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoomslider';\n    const thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    const containerElement = this.element;\n    containerElement.className =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n\n    containerElement.addEventListener(\n      PointerEventType.POINTERDOWN,\n      this.handleDraggerStart_.bind(this),\n      false\n    );\n    containerElement.addEventListener(\n      PointerEventType.POINTERMOVE,\n      this.handleDraggerDrag_.bind(this),\n      false\n    );\n    containerElement.addEventListener(\n      PointerEventType.POINTERUP,\n      this.handleDraggerEnd_.bind(this),\n      false\n    );\n\n    containerElement.addEventListener(\n      EventType.CLICK,\n      this.handleContainerClick_.bind(this),\n      false\n    );\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      map.render();\n    }\n  }\n\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @return {boolean} Initialization successful\n   * @private\n   */\n  initSlider_() {\n    const container = this.element;\n    let containerWidth = container.offsetWidth;\n    let containerHeight = container.offsetHeight;\n    if (containerWidth === 0 && containerHeight === 0) {\n      return (this.sliderInitialized_ = false);\n    }\n\n    const containerStyle = getComputedStyle(container);\n    containerWidth -=\n      parseFloat(containerStyle['paddingRight']) +\n      parseFloat(containerStyle['paddingLeft']);\n    containerHeight -=\n      parseFloat(containerStyle['paddingTop']) +\n      parseFloat(containerStyle['paddingBottom']);\n    const thumb = /** @type {HTMLElement} */ (container.firstElementChild);\n    const thumbStyle = getComputedStyle(thumb);\n    const thumbWidth =\n      thumb.offsetWidth +\n      parseFloat(thumbStyle['marginRight']) +\n      parseFloat(thumbStyle['marginLeft']);\n    const thumbHeight =\n      thumb.offsetHeight +\n      parseFloat(thumbStyle['marginTop']) +\n      parseFloat(thumbStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerWidth > containerHeight) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerWidth - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerHeight - thumbHeight;\n    }\n    return (this.sliderInitialized_ = true);\n  }\n\n  /**\n   * @param {PointerEvent} event The browser event to handle.\n   * @private\n   */\n  handleContainerClick_(event) {\n    const view = this.getMap().getView();\n\n    const relativePosition = this.getRelativePosition_(\n      event.offsetX - this.thumbSize_[0] / 2,\n      event.offsetY - this.thumbSize_[1] / 2\n    );\n\n    const resolution = this.getResolutionForPosition_(relativePosition);\n    const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n\n    view.animateInternal({\n      zoom: zoom,\n      duration: this.duration_,\n      easing: easeOut,\n    });\n  }\n\n  /**\n   * Handle dragger start events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerStart_(event) {\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\n      const element = /** @type {HTMLElement} */ (\n        this.element.firstElementChild\n      );\n      this.getMap().getView().beginInteraction();\n      this.startX_ = event.clientX - parseFloat(element.style.left);\n      this.startY_ = event.clientY - parseFloat(element.style.top);\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        const drag = this.handleDraggerDrag_;\n        const end = this.handleDraggerEnd_;\n        const doc = this.getMap().getOwnerDocument();\n        this.dragListenerKeys_.push(\n          listen(doc, PointerEventType.POINTERMOVE, drag, this),\n          listen(doc, PointerEventType.POINTERUP, end, this)\n        );\n      }\n    }\n  }\n\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerDrag_(event) {\n    if (this.dragging_) {\n      const deltaX = event.clientX - this.startX_;\n      const deltaY = event.clientY - this.startY_;\n      const relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ =\n        this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n    }\n  }\n\n  /**\n   * Handle dragger end events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerEnd_(event) {\n    if (this.dragging_) {\n      const view = this.getMap().getView();\n      view.endInteraction();\n\n      this.dragging_ = false;\n      this.startX_ = undefined;\n      this.startY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  }\n\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n  setThumbPosition_(res) {\n    const position = this.getPositionForResolution_(res);\n    const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  }\n\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n  getRelativePosition_(x, y) {\n    let amount;\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n    return clamp(amount, 0, 1);\n  }\n\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n  getResolutionForPosition_(position) {\n    const fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  }\n\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n  getPositionForResolution_(res) {\n    const fn = this.getMap().getView().getValueForResolutionFunction();\n    return clamp(1 - fn(res), 0, 1);\n  }\n\n  /**\n   * Update the zoomslider element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    if (!mapEvent.frameState) {\n      return;\n    }\n    if (!this.sliderInitialized_ && !this.initSlider_()) {\n      return;\n    }\n    const res = mapEvent.frameState.viewState.resolution;\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  }\n}\n\nexport default ZoomSlider;\n"],
  "mappings": "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",
  "names": ["EventType_default"]
}
