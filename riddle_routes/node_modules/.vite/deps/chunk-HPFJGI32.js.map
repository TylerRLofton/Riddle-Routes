{
  "version": 3,
  "sources": ["../../ol/color.js"],
  "sourcesContent": ["/**\r\n * @module ol/color\r\n */\r\nimport {assert} from './asserts.js';\r\nimport {clamp} from './math.js';\r\n\r\n/**\r\n * A color represented as a short array [red, green, blue, alpha].\r\n * red, green, and blue should be integers in the range 0..255 inclusive.\r\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\r\n * given then `1` will be used.\r\n * @typedef {Array<number>} Color\r\n * @api\r\n */\r\n\r\n/**\r\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\r\n * @const\r\n * @type {RegExp}\r\n * @private\r\n */\r\nconst HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\r\n\r\n/**\r\n * Regular expression for matching potential named color style strings.\r\n * @const\r\n * @type {RegExp}\r\n * @private\r\n */\r\nconst NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\r\n\r\n/**\r\n * Return the color as an rgba string.\r\n * @param {Color|string} color Color.\r\n * @return {string} Rgba string.\r\n * @api\r\n */\r\nexport function asString(color) {\r\n  if (typeof color === 'string') {\r\n    return color;\r\n  } else {\r\n    return toString(color);\r\n  }\r\n}\r\n\r\n/**\r\n * Return named color as an rgba string.\r\n * @param {string} color Named color.\r\n * @return {string} Rgb string.\r\n */\r\nfunction fromNamed(color) {\r\n  const el = document.createElement('div');\r\n  el.style.color = color;\r\n  if (el.style.color !== '') {\r\n    document.body.appendChild(el);\r\n    const rgb = getComputedStyle(el).color;\r\n    document.body.removeChild(el);\r\n    return rgb;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {Color} Color.\r\n */\r\nexport const fromString = (function () {\r\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\r\n  // semantics, whenever the cache grows too large we simply delete an\r\n  // arbitrary 25% of the entries.\r\n\r\n  /**\r\n   * @const\r\n   * @type {number}\r\n   */\r\n  const MAX_CACHE_SIZE = 1024;\r\n\r\n  /**\r\n   * @type {Object<string, Color>}\r\n   */\r\n  const cache = {};\r\n\r\n  /**\r\n   * @type {number}\r\n   */\r\n  let cacheSize = 0;\r\n\r\n  return (\r\n    /**\r\n     * @param {string} s String.\r\n     * @return {Color} Color.\r\n     */\r\n    function (s) {\r\n      let color;\r\n      if (cache.hasOwnProperty(s)) {\r\n        color = cache[s];\r\n      } else {\r\n        if (cacheSize >= MAX_CACHE_SIZE) {\r\n          let i = 0;\r\n          for (const key in cache) {\r\n            if ((i++ & 3) === 0) {\r\n              delete cache[key];\r\n              --cacheSize;\r\n            }\r\n          }\r\n        }\r\n        color = fromStringInternal_(s);\r\n        cache[s] = color;\r\n        ++cacheSize;\r\n      }\r\n      return color;\r\n    }\r\n  );\r\n})();\r\n\r\n/**\r\n * Return the color as an array. This function maintains a cache of calculated\r\n * arrays which means the result should not be modified.\r\n * @param {Color|string} color Color.\r\n * @return {Color} Color.\r\n * @api\r\n */\r\nexport function asArray(color) {\r\n  if (Array.isArray(color)) {\r\n    return color;\r\n  } else {\r\n    return fromString(color);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @private\r\n * @return {Color} Color.\r\n */\r\nfunction fromStringInternal_(s) {\r\n  let r, g, b, a, color;\r\n\r\n  if (NAMED_COLOR_RE_.exec(s)) {\r\n    s = fromNamed(s);\r\n  }\r\n\r\n  if (HEX_COLOR_RE_.exec(s)) {\r\n    // hex\r\n    const n = s.length - 1; // number of hex digits\r\n    let d; // number of digits per channel\r\n    if (n <= 4) {\r\n      d = 1;\r\n    } else {\r\n      d = 2;\r\n    }\r\n    const hasAlpha = n === 4 || n === 8;\r\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\r\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\r\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\r\n    if (hasAlpha) {\r\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\r\n    } else {\r\n      a = 255;\r\n    }\r\n    if (d == 1) {\r\n      r = (r << 4) + r;\r\n      g = (g << 4) + g;\r\n      b = (b << 4) + b;\r\n      if (hasAlpha) {\r\n        a = (a << 4) + a;\r\n      }\r\n    }\r\n    color = [r, g, b, a / 255];\r\n  } else if (s.startsWith('rgba(')) {\r\n    // rgba()\r\n    color = s.slice(5, -1).split(',').map(Number);\r\n    normalize(color);\r\n  } else if (s.startsWith('rgb(')) {\r\n    // rgb()\r\n    color = s.slice(4, -1).split(',').map(Number);\r\n    color.push(1);\r\n    normalize(color);\r\n  } else {\r\n    assert(false, 14); // Invalid color\r\n  }\r\n  return color;\r\n}\r\n\r\n/**\r\n * TODO this function is only used in the test, we probably shouldn't export it\r\n * @param {Color} color Color.\r\n * @return {Color} Clamped color.\r\n */\r\nexport function normalize(color) {\r\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\r\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\r\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\r\n  color[3] = clamp(color[3], 0, 1);\r\n  return color;\r\n}\r\n\r\n/**\r\n * @param {Color} color Color.\r\n * @return {string} String.\r\n */\r\nexport function toString(color) {\r\n  let r = color[0];\r\n  if (r != (r | 0)) {\r\n    r = (r + 0.5) | 0;\r\n  }\r\n  let g = color[1];\r\n  if (g != (g | 0)) {\r\n    g = (g + 0.5) | 0;\r\n  }\r\n  let b = color[2];\r\n  if (b != (b | 0)) {\r\n    b = (b + 0.5) | 0;\r\n  }\r\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\r\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {boolean} Whether the string is actually a valid color\r\n */\r\nexport function isStringColor(s) {\r\n  if (NAMED_COLOR_RE_.test(s)) {\r\n    s = fromNamed(s);\r\n  }\r\n  return HEX_COLOR_RE_.test(s) || s.startsWith('rgba(') || s.startsWith('rgb(');\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
